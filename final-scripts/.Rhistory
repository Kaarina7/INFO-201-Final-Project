<<<<<<< Updated upstream
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Bellevue"
# Assign your name to the variable `my_name`
my_name <- "Kaarina Tulleau"
# Assign your height (in inches) to a variable `my_height`
my_height <- 61
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 50
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 100
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 10001
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 100
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Create a variable `my_name` that contains your name
my_name <- "Kaarina Tulleau"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Make the `now_doing` variable upper case
toupper(now_doing)
fav_2 <- 18
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 7
(201)
# Divide each number by the square root of 201 and save the new value in the
# original variable
new_1 <- fav_1 / sqrt(201)
fav_1 <- new_1
new_2 <- fav_2 / sqrt(201)
fav_2 <- new_2
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1)
round_2 <- round(fav_2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(hometown)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(max_puppies)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(my_height)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(fav_1, fav_2)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(my_name, name_length, new_1, new_2, now_doing, puppies)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(puppy_price, raw_sum, round_1, round_2, round_sum, sum_round, too_expensive)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(total_cost)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
?substr
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(1, 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(start = 1, stop = 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(1, start = 1, stop = 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(x, start = 1, stop = 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(x = 1, start = 1, stop = 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(lyric, 1, 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
numcharacters <- nchar(lyric)
fruits <- substr(lyric, 15, numcharacters)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(fruits, "a", "ee")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro + fruit_e
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro + fruits_e
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
is_twice_as_long <- function(string1, string2) {
string1_length <- nchar(string1)
string2_length <- nchar(string2)
small_string <- min(string1_length, string2_length)
long_string <- max(string1_length, string2_length)
if(long_string - small_string == small_string) {
twice_length <- TRUE
return(twice_length)
} else {
twice_length <- FALSE
return(twice_length)
}
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("java", "no")
is_twice_as_long("no", "java")
is_twice_as_long("R", "java")
rm(fruits, fruits_e, fruits_o)
rm(intro, lyric, lyric_e, numcharacters)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Kaarina", "Kristiina", "Irene")
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Kaarina", "Kristiina", "Irene")
print(paste(names))
print(paste(names))
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n + 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(10, 1))
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- c(seq(-5, 10, 0.1))
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
rm(m)
rm(n, cos_wave, names, sin_wave, wave, x_range)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(seq(21, 30))
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten, next_ten
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(seq(1, 100, 2))
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(seq(0, 100, 2))
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(seq(2, 100, 2))
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
print(paste(even))
even %% 2
print(paste(even %% 2)
all(even %% 2 = 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 = 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- c(phone_numbers[1:3])
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- c(phone_numbers[<5])
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers < 5
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
num_is_small <- phone_numbers < 5
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
num_is_small <- phone_numbers <= 5
small <- phone_numbers[num_is_small]
small <- phone_numbers[phone_numbers <= 5]
rm(num_is_small)
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 == 1] <-0
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 == 1] <- 0
str_count("eeyore", "e")
library(stringr)
str_count("eeyore", "e")
count_occurrences <- function(vector_letters, letter) {
num_occurrences <- str_count(vector_letters, letter)
return(num_occurrences)
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
num_e <- count_occurrences(sentence, "e")
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
num_e <- count_occurrences(sentence_list, "e")
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "coding in r is fun"
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
sentence_list <- strsplit(sentence, split = "")
count_occurrences <- function(vector_letters, letter) {
num_occurrences <- str_count(vector_letters, letter)
return(num_occurrences)
}
num_e <- count_occurrences(sentence_list, "e")
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
num_e <- count_occurrences(sentence_list("eeyore", "e")
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
num_e <- count_occurrences("eeyore", "e")
num_e <- count_occurrences("eeyore", "e")
num_e <- count_occurrences(sentence, "e")
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "coding in r is great"
num_e <- count_occurrences(sentence, "e")
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(sentence, count_occurrences())
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(sentence, count_occurrences(), unique_letters)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(sentence, count_occurrences(), "e")
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(sentence, count_occurrences("e"))
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(sentence, count_occurrences("e"))
# Assignment 2: Foundational Skills
#
# Before you get started:
# - Set your working directory to "source file location" using the Session menu
# - Run the following line of code to delete all variables in your workspace
#     (This will make it easier to test your script)
rm(list = ls())
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
top_three <- movies[1:3]
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Forrest Gump", "Tangled", "Men In Black", "Knives Out", "Bicentennial Man", "Star Wars")
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase " is a great movie!" to the end of each element in `movies`
excited <- c(movies, " is a great movie")
paste(excited)
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase " is a great movie!" to the end of each element in `movies`
excited <- paste(movies, " is a great movie")
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase " is a great movie!" to the end of each element in `movies`
excited <- paste(movies, " is a great movie!")
print(excited)
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase " is a great movie!" to the end of each element in `movies`
excited <- paste(movies, "is a great movie!")
print(excited)
# Create a vector `without_four` that omits the fourth element from `movies`
# You should do this by using a _negative index_
without_four <- movies[-4]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- c(4:400/4)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- c((4:400)%%4)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- c((4:400)%%4 == 0)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
numbers <- c(4:400)
multiples_of_four <- numbers[(numbers%%4) == 0]
print(multiples_of_four)
multiples_of_four <- numbers[(c(4:400)%%4) == 0]
print(multiples_of_four)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- numbers[(c(4:400)%%4) == 0]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- (c(4:400)%%4) == 0
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- c((c(4:400)%%4) == 0)
rm(numbers)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- numbers[(c(4:400)%%4) == 0]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
numbers <- c(4:400)
multiples_of_four <- numbers[(numbers%%4) == 0]
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Hints:
# - See chapter 7.4 in the book for vector filtering
# - Google search "modulo operator in R"
multiples_of_eight <- multiples_of_four[(multiples_of_four%%8) == 0]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
range <- c(4:400)
multiples_of_four <- numbers[(range%%4) == 0]
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Hints:
# - See chapter 7.4 in the book for vector filtering
# - Google search "modulo operator in R"
multiples_of_eight <- multiples_of_four[(multiples_of_four%%8) == 0]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of the vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of the vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of the vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in the `numbers` vector
# that are lower than `numbers_mean`
# Hint: Use vector filtering)
lower_numbers <- numbers[(numbers < 849.5)]
print(lower_numbers)
# Create a vector `higher_numbers` that the values in the `numbers` vector
# that are higher than `numbers_mean`
# Hint: Again, use vector filtering
higher_numbers <- numbers[(numbers > 849.5)]
install.packages("lintr")
clear
cls
install.packages("lintr")
t
install.packages("lintr")
install.packages("xml2")
install.packages("xml2")
install.packages("lintr")
install.packages("libxml-2.0")
install.packages("lintr")
install.packages("openssl")
install.packages("openssl")
install.packages("lintr")
q()
shiny::runApp('Documents/INFO201/a6-Kaarina7')
rm(list = ls())
# load dataset
midwest_data <- midwest
runApp('Documents/INFO201/a6-Kaarina7')
runApp('Documents/INFO201/a6-Kaarina7')
runApp('Documents/INFO201/a6-Kaarina7')
runApp('Documents/INFO201/a6-Kaarina7')
runApp('Documents/INFO201/a6-Kaarina7')
shiny::runApp('Documents/INFO201/INFO-201-Final-Project/final-scripts')
shiny::runApp('Documents/INFO201/INFO-201-Final-Project/final-scripts')
runApp('Documents/INFO201/INFO-201-Final-Project/final-scripts')
runApp('Documents/INFO201/INFO-201-Final-Project/final-scripts')
setwd("~/Documents/INFO201/INFO-201-Final-Project/final-scripts")
shiny::runApp()
setwd("~/Documents/INFO201/INFO-201-Final-Project/final-scripts")
runApp()
runApp()
=======
"Zillow Housing Information (2010 - 2017)"
),
navbarPage(
title = "Navigation Bar",
overviewInformation,
conclusions,
theme = "style.css",
tags$style(
id = "NavBarHeader",
position = "static-top"
)
)
)
server <- function(input, output) {
output$conclusion1 <- renderPlotly({
source("aggregate_Table.R")
change_in_price <- city_data %>%
select(X2011.01, X2017.09) %>%
drop_na() %>%
summarise(
Jan.2011 = mean(X2011.01),
Sep.2017 = mean(X2017.09)
) %>%
gather(key = "Year", value = "List.Price")
##
price_change_plot <- ggplot(change_in_price) +
geom_bar(mapping = aes( x = Year, y = List.Price,
text = paste0("Price = $",
round(List.Price, 2))),
stat = "identity", fill = "Blue")
return(ggplotly(price_change_plot, tooltip = "text"))
})
}
shinyApp(ui = uiui, server = server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(ggplot2)
library(plotly)
source("line_tab.R")
source("map_tab.R")
source("styles.css")
source("aggregate_Table.R")
overviewInformation <- tabPanel(
title = "Overview",
tags$body(
id = "Body",
tags$div(
id = "OverviewSection1",
tags$h3(
id = "OverviewSubHeader",
"Choice of Domain: "
),
p(
"We are business, economics, and computational finance majors. We decided
to center our projects around something that relates to something in
this area. We felt that the field of housing markets intersected all of
our major-related interests, so we chose to focus on it for our project."
),
tags$h3(
id = "OverviewSubHeader",
"Our Data sets: "
),
p(
"The data sets we decided to use come from Zillow.
Zillow regularly gathers information about all of the homes listed for sale
on their website and makes it publicly  available, and we decided to make
use of several pieces of it. The first lists the median housing prices
across the nation according to different regional categories.
It can be used to answer questions about how house prices vary by
geographic region, as well as how they've changed over the past ten years.
The second lists the average number of days a listing stays on Zillow
by region. This can be used to examine changes in the speed
with which houses sell in different areas."
),
tags$h3(
id = "OverviewSubHeader",
"Links to Data Sets: "
),
tags$a(
id = "links",
href = "https://data.world/zillow-data/median-list-price", "Median Price"
),
p(
),
tags$a(
id = "links",
href = "https://data.world/zillow-data/days-on-zillow", "Days on Zillow"
),
tags$h3(
id = "OverviewSubHeader",
"Purpose: "
),
p(
"Analysis from the median listing prices can be compared to other
economic factors to see how the housing markets have changed related to
them. Further research can be done to see what events or policies
contributed to these changes. The analysis will also explore where and
when hosuing prices are the greatest/least and where/when major changes
have happened. Additionally, insights on where and how long houses stay
on the market for the longest or the least can be discovered."
)
),
tags$div(
id = "OverviewSection2",
tags$h3(
id = "OverviewSubHeader",
"Visualizations: "
),
tags$h3(
id = "VisualSubHeader",
"Bar Chart"
),
p(
"The first visualization is a bar chart that shows how the average
median listing price changed from 2010 - 2017."
),
tags$h3(
id = "VisualSubHeader",
"Map"
),
p(
"The second visualization is an interactive map that shows the different
locations of the houses."
),
tags$h3(
id = "VisualSubHeader",
"Line"
),
p(
"The third visualization is a line graph about how long the different
houses on Zillow have been on the market for."
)
)
)
)
sd <- aggregate_table(city_Data)
change <- 299414 - 238738
per_change <- round((((change) / 299414) * 100), 2)
link <- tags$a(
href = "https://fred.stlouisfed.org/series/MEHOINUSA672N",
"10%"
)
conclusions <- tabPanel(
title = "Conclusions",
tags$h2(
"Conclusions From Our Data "
),
tags$div(
tags$h4(
id = "ColncldusionSubHeader",
"Conclusions from Visualization3"
),
h2(
"Economic Conclusions"
)
),
p(paste0("The price in 2017 was $299414 and at its lowest point in 2011 was
$238738. The price increases by $", change,
" which is an increase of ", per_change, "%")),
p("In the same time that the hosuing price has increased by ", per_change,
"the % increase in household income has risen by,", link),
p("Houses are usualy sold around 3% less than the listing price on average
While the amount of listings on Zillow is not every house listed on the market
,the general trend holds that prices of houses are increasing at a greater
rate than income"),
box(plotlyOutput(outputId = "conclusion1", width = "50%")),
h2(
"Hosuing Market Insights"
),
sd(sd$List.Price),
p("The table shows that the cities with the highest median house prices. The
cities in the top 10 tend to be on the coasts or by the water in mostly
sunny areas."),
)
uiui <- fluidPage(
includeCSS("style.css"),
tags$h1(
id = "Page_Header",
"Zillow Housing Information (2010 - 2017)"
),
navbarPage(
title = "Navigation Bar",
overviewInformation,
conclusions,
theme = "style.css",
tags$style(
id = "NavBarHeader",
position = "static-top"
)
)
)
server <- function(input, output) {
output$conclusion1 <- renderPlotly({
source("aggregate_Table.R")
change_in_price <- city_data %>%
select(X2011.01, X2017.09) %>%
drop_na() %>%
summarise(
Jan.2011 = mean(X2011.01),
Sep.2017 = mean(X2017.09)
) %>%
gather(key = "Year", value = "List.Price")
##
price_change_plot <- ggplot(change_in_price) +
geom_bar(mapping = aes( x = Year, y = List.Price,
text = paste0("Price = $",
round(List.Price, 2))),
stat = "identity", fill = "Blue")
return(ggplotly(price_change_plot, tooltip = "text"))
})
}
shinyApp(ui = uiui, server = server)
uiui <- fluidPage(
includeCSS("style.css"),
tags$h1(
id = "Page_Header",
"Zillow Housing Information (2010 - 2017)"
),
navbarPage(
title = "Navigation Bar",
overviewInformation,
conclusions,
theme = "style.css",
tags$style(
id = "NavBarHeader",
position = "static-top"
)
)
)
conclusions <- tabPanel(
title = "Conclusions",
tags$h2(
"Conclusions From Our Data "
),
tags$div(
tags$h4(
id = "ColncldusionSubHeader",
"Conclusions from Visualization3"
),
h2(
"Economic Conclusions"
)
),
p(paste0("The price in 2017 was $299414 and at its lowest point in 2011 was
$238738. The price increases by $", change,
" which is an increase of ", per_change, "%")),
p("In the same time that the hosuing price has increased by ", per_change,
"the % increase in household income has risen by,", link),
p("Houses are usualy sold around 3% less than the listing price on average
While the amount of listings on Zillow is not every house listed on the market
,the general trend holds that prices of houses are increasing at a greater
rate than income"),
box(plotlyOutput(outputId = "conclusion1", width = "50%")),
h2(
uiui <- fluidPage(
includeCSS("style.css"),
tags$h1(
id = "Page_Header",
"Zillow Housing Information (2010 - 2017)"
),
navbarPage(
title = "Navigation Bar",
overviewInformation,
conclusions,
theme = "style.css",
tags$style(
id = "NavBarHeader",
position = "static-top"
)
)
)
shinyApp(ui = uiui, server = server)
shinyApp(ui = uiui, server = server)
uiui <- fluidPage(
includeCSS("style.css"),
tags$h1(
id = "Page_Header",
"Zillow Housing Information (2010 - 2017)"
),
navbarPage(
title = "Navigation Bar",
overviewInformation,
conclusions,
theme = "style.css",
tags$style(
id = "NavBarHeader",
position = "static-top"
)
)
)
conclusions <- tabPanel(
title = "Conclusions",
tags$h2(
"Conclusions From Our Data "
),
tags$div(
tags$h4(
id = "ColncldusionSubHeader",
"Conclusions from Visualization3"
),
h2(
"Economic Conclusions"
)
),
p(paste0("The price in 2017 was $299414 and at its lowest point in 2011 was
$238738. The price increases by $", change,
" which is an increase of ", per_change, "%")),
p("In the same time that the hosuing price has increased by ", per_change,
"the % increase in household income has risen by,", link),
p("Houses are usualy sold around 3% less than the listing price on average
While the amount of listings on Zillow is not every house listed on the market
,the general trend holds that prices of houses are increasing at a greater
rate than income"),
box(plotlyOutput(outputId = "conclusion1", width = "50%")),
h2(
uiui <- fluidPage(
includeCSS("style.css"),
tags$h1(
id = "Page_Header",
"Zillow Housing Information (2010 - 2017)"
),
navbarPage(
title = "Navigation Bar",
overviewInformation,
conclusions,
theme = "style.css",
tags$style(
id = "NavBarHeader",
position = "static-top"
)
)
)
library(shiny)
library(shinydashboard)
library(leaflet)
library(ggplot2)
library(plotly)
source("line_tab.R")
source("map_tab.R")
source("styles.css")
source("aggregate_Table.R")
overviewInformation <- tabPanel(
title = "Overview",
tags$body(
id = "Body",
tags$div(
id = "OverviewSection1",
tags$h3(
id = "OverviewSubHeader",
"Choice of Domain: "
),
p(
"We are business, economics, and computational finance majors. We decided
to center our projects around something that relates to something in
this area. We felt that the field of housing markets intersected all of
our major-related interests, so we chose to focus on it for our project."
),
tags$h3(
id = "OverviewSubHeader",
"Our Data sets: "
),
p(
"The data sets we decided to use come from Zillow.
Zillow regularly gathers information about all of the homes listed for sale
on their website and makes it publicly  available, and we decided to make
use of several pieces of it. The first lists the median housing prices
across the nation according to different regional categories.
It can be used to answer questions about how house prices vary by
geographic region, as well as how they've changed over the past ten years.
The second lists the average number of days a listing stays on Zillow
by region. This can be used to examine changes in the speed
with which houses sell in different areas."
),
tags$h3(
id = "OverviewSubHeader",
"Links to Data Sets: "
),
tags$a(
id = "links",
href = "https://data.world/zillow-data/median-list-price", "Median Price"
),
p(
),
tags$a(
id = "links",
href = "https://data.world/zillow-data/days-on-zillow", "Days on Zillow"
),
tags$h3(
id = "OverviewSubHeader",
"Purpose: "
),
p(
"Analysis from the median listing prices can be compared to other
economic factors to see how the housing markets have changed related to
them. Further research can be done to see what events or policies
contributed to these changes. The analysis will also explore where and
when hosuing prices are the greatest/least and where/when major changes
have happened. Additionally, insights on where and how long houses stay
on the market for the longest or the least can be discovered."
)
),
tags$div(
id = "OverviewSection2",
tags$h3(
id = "OverviewSubHeader",
"Visualizations: "
),
tags$h3(
id = "VisualSubHeader",
"Bar Chart"
),
p(
"The first visualization is a bar chart that shows how the average
median listing price changed from 2010 - 2017."
),
tags$h3(
id = "VisualSubHeader",
"Map"
),
p(
"The second visualization is an interactive map that shows the different
locations of the houses."
),
tags$h3(
id = "VisualSubHeader",
"Line"
),
p(
"The third visualization is a line graph about how long the different
houses on Zillow have been on the market for."
)
)
)
)
sd <- aggregate_table(city_Data)
change <- 299414 - 238738
per_change <- round((((change) / 299414) * 100), 2)
link <- tags$a(
href = "https://fred.stlouisfed.org/series/MEHOINUSA672N",
"10%"
)
conclusions <- tabPanel(
title = "Conclusions",
tags$h2(
"Conclusions From Our Data "
),
tags$div(
tags$h4(
id = "ColncldusionSubHeader",
"Conclusions from Visualization3"
),
h2(
"Economic Conclusions"
)
),
p(paste0("The price in 2017 was $299414 and at its lowest point in 2011 was
$238738. The price increases by $", change,
" which is an increase of ", per_change, "%")),
p("In the same time that the hosuing price has increased by ", per_change,
"the % increase in household income has risen by,", link),
p("Houses are usualy sold around 3% less than the listing price on average
While the amount of listings on Zillow is not every house listed on the market
,the general trend holds that prices of houses are increasing at a greater
rate than income"),
box(plotlyOutput(outputId = "conclusion1", width = "50%")),
h2(
"Hosuing Market Insights"
),
sd(sd$List.Price),
p("The table shows that the cities with the highest median house prices. The
cities in the top 10 tend to be on the coasts or by the water in mostly
sunny areas."),
)
uiui <- fluidPage(
includeCSS("style.css"),
tags$h1(
id = "Page_Header",
"Zillow Housing Information (2010 - 2017)"
),
navbarPage(
title = "Navigation Bar",
overviewInformation,
conclusions,
theme = "style.css",
tags$style(
id = "NavBarHeader",
position = "static-top"
)
)
)
server <- function(input, output) {
output$conclusion1 <- renderPlotly({
source("aggregate_Table.R")
change_in_price <- city_data %>%
select(X2011.01, X2017.09) %>%
drop_na() %>%
summarise(
Jan.2011 = mean(X2011.01),
Sep.2017 = mean(X2017.09)
) %>%
gather(key = "Year", value = "List.Price")
##
price_change_plot <- ggplot(change_in_price) +
geom_bar(mapping = aes( x = Year, y = List.Price,
text = paste0("Price = $",
round(List.Price, 2))),
stat = "identity", fill = "Blue")
return(ggplotly(price_change_plot, tooltip = "text"))
})
}
shinyApp(ui = uiui, server = server)
>>>>>>> Stashed changes
