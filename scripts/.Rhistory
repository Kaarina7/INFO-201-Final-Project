list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
highest_cities_table <- aggregate_table(x)
?subset
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
subset(select = matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
highest_cities_table <- aggregate_table(x)
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
select("RegionName") %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
# The particular group calculation was done because each of the data sets
# we are using is organized by a different type of region, city, state, county,
# neighborhood, and Zip code. The data can be applied to show the average list
# price by region over the course of 7 years. It displays the highest 10 prices.
x <- read.csv(
"../project-data/median-listing-price/City_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
highest_cities_table <- aggregate_table(x)
data %>%
#Getting all the year columns and the Region Name column
select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
highest_cities_table <- aggregate_table(x)
data %>%
#Getting all the year columns and the Region Name column
select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
data %>%
#Getting all the year columns and the Region Name column
dplyr::select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
dplyr::select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
# The particular group calculation was done because each of the data sets
# we are using is organized by a different type of region, city, state, county,
# neighborhood, and Zip code. The data can be applied to show the average list
# price by region over the course of 7 years. It displays the highest 10 prices.
x <- read.csv(
"../project-data/median-listing-price/City_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
highest_cities_table <- aggregate_table(x)
x %>%
#Getting all the year columns and the Region Name column
dplyr::select(cotains("201","RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
x %>%
#Getting all the year columns and the Region Name column
dplyr::select(contains("201","RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
x %>%
#Getting all the year columns and the Region Name column
select(contains("201","RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
x %>%
#Getting all the year columns and the Region Name column
select(matches("201","RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
x %>%
#Getting all the year columns and the Region Name column
select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
data %>%
#Getting all the year columns and the Region Name column
dplyr::select(cotains("201","RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
dplyr::select(cotains("201","RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
highest_cities_table <- aggregate_table(x)
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
dplyr::select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
# The particular group calculation was done because each of the data sets
# we are using is organized by a different type of region, city, state, county,
# neighborhood, and Zip code. The data can be applied to show the average list
# price by region over the course of 7 years. It displays the highest 10 prices.
x <- read.csv(
"../project-data/median-listing-price/City_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
highest_cities_table <- aggregate_table(x)
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
dplyr::select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
highest_cities_table1 <- aggregate_table(x)
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
select(matches(c)) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
highest_cities_table1 <- aggregate_table(x)
c <- c("201|RegionName")
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
select(matches(c)) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
highest_cities_table1 <- aggregate_table(x)
View(x)
table_by_Region <- function(x) {
x %>%
group_by(RegionName) %>%
select(RegionName, !!as.name("X2010.01"), !!as.name("X2017.09"))
}
table_by_Region(x)
x %>%
group_by(RegionName) %>%
select(RegionName, !!as.name("X2010.01"), !!as.name("X2017.09"))
new <- table_by_Region(x)
View(new)
table_by_Region <- function(x) {
x %>%
group_by(RegionName) %>%
filter(!is.na())
select(RegionName, !!as.name("X2010.01"), !!as.name("X2017.09"))
}
new <- table_by_Region(x)
table_by_Region <- function(x) {
x %>%
group_by(RegionName) %>%
filter(!is.na())%>%
select(RegionName, !!as.name("X2010.01"), !!as.name("X2017.09"))
}
new <- table_by_Region(x)
table_by_Region <- function(x) {
x %>%
group_by(RegionName) %>%
filter(!is.na(X2010.01))%>%
select(RegionName, !!as.name("X2010.01"), !!as.name("X2017.09"))
}
new <- table_by_Region(x)
View(new)
table_by_Region <- function(x) {
x %>%
group_by(RegionName) %>%
filter(!is.na(X2010.01))%>%
select(RegionName, !!as.name("X2010.01"), !!as.name("X2017.09")) %>%
mutate(
Change = X2017.09 - X2010.01
)
}
new <- table_by_Region(x)
View(new)
table_by_Region <- function(x) {
x %>%
group_by(RegionName) %>%
filter(!is.na(X2010.01))%>%
select(RegionName, !!as.name("X2010.01"), !!as.name("X2017.09")) %>%
mutate(
Change = X2017.09 - X2010.01
) %>%
arrange(desc(Change)) %>%
top_n(10)
}
new <- table_by_Region(x)
View(new)
table_by_Region <- function(x) {
x %>%
group_by(RegionName) %>%
filter(!is.na(X2010.01))%>%
select(RegionName, !!as.name("X2010.01"), !!as.name("X2017.09")) %>%
mutate(
Change = X2017.09 - X2010.01
) %>%
arrange(desc(Change)) %>%
head(10)
}
new <- table_by_Region(x)
View(new)
table_by_Region <- function(dataframe) {
dataframe %>%
group_by(RegionName) %>%
filter(!is.na(X2010.01))%>%
select(RegionName, !!as.name("X2010.01"), !!as.name("X2017.09")) %>%
mutate(
Change = X2017.09 - X2010.01
) %>%
arrange(desc(Change)) %>%
head(10)
}
table <- table_by_Region(x)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "./scripts/")
library(knitr)
library(dplyr)
source("./aggregate_Table.R")
x
kable(aggregate_table(data), format = "pipe", align = "c")
library(knitr)
library(dplyr)
source("./aggregate_Table.R")
source("./aggregate_Table.R")
x
x
aggregate_table(x)
library(knitr)
library(dplyr)
source("./aggregate_Table.R")
source("./aggregate_Table.R")
kable(
aggregate_table(x)
)
# The particular group calculation was done because each of the data sets
# we are using is organized by a different type of region, city, state, county,
# neighborhood, and Zip code. The data can be applied to show the average list
# price by region over the course of 7 years. It displays the highest 10 prices.
x <- read.csv(
"../project-data/median-listing-price/City_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
columns <- c("201|RegionName")
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
select(matches(columns)) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
