"% College:", midwest$percollege, "<br>",
"% Employment:", midwest$percprof, "<br>",
"% Below Poverty:", midwest$percbelowpoverty, "<br>",
"% Adulty Poverty:", midwest$percadultpoverty, "<br>",
"% Children Below Poverty:", midwest$percchildbelowpovert, "<br>",
"% Elderly Poverty:", midwest$percelderlypoverty, "<br>"
),
color = ~pal(midwest[[input$mapColor]])
) %>%
addLegend(pal = pal, values = input$mapColor, opacity = 0.7,
title = "Title", position = "bottomright")
})
output$table <- renderDataTable({
table_conditions <- c(input$table_conditions)
midwest %>%
filter(state %in% table_conditions)
})
}
library("shiny", "plotly", "ggplot2", "dplyr")
source("app_ui.R")
source("app_server.R")
shinyApp(ui = ui, server = server)
runApp()
runApp()
?box
runApp()
runApp()
runApp()
runApp()
?labs
runApp()
runApp()
library(dplyr)
city_price_data <- read.csv(
"../project-data/median-listing-price/City_MedianListingPrice_AllHomes.csv")
setwd("C:/Users/rchap/Info201/INFO-201-Final-Project/scripts")
library(dplyr)
city_price_data <- read.csv(
"../project-data/median-listing-price/City_MedianListingPrice_AllHomes.csv")
# gets summary information about a given dataset
get_summary_info <- function(dataset) {
# gets the city with the highest median house price in 2017
highest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == max(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the city with the lowest median house price in 2017
lowest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == min(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the average median house price in 2017
average_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 != is.na(X2017.01)) %>%
summarize(mean = mean(X2017.01)) %>%
pull(mean)
# gets the median price of the largest city, New York in 2017
new_york_2017_price <- city_price_data %>%
filter(RegionName == "New York") %>%
pull(X2017.01)
# gets the median price of Winterset, which is tied for smallest city listed
winterset_2017_price <- city_price_data %>%
filter(RegionName == "Winterset") %>%
pull(X2017.01)
#returns a list of 2017 summary info
return(list(highest_price = highest_median_price_2017,
lowest_price = lowest_median_price_2017,
average_price = average_median_price_2017,
new_york_price = new_york_2017_price,
winterset_price = winterset_2017_price))
}
x <- get_summary_info(city_price_data)
get_summary_info(city_price_data)
# gets summary information about a given dataset
get_summary_info <- function(dataset) {
# gets the city with the highest median house price in 2017
highest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == max(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the city with the lowest median house price in 2017
lowest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == min(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the average median house price in 2017
average_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 != is.na(X2017.01)) %>%
summarize(mean = mean(X2017.01)) %>%
pull(mean)
# gets the median price of the largest city, New York in 2017
new_york_2017_price <- city_price_data %>%
filter(RegionName == "New York") %>%
pull(X2017.01)
# gets the median price of Winterset, which is tied for smallest city listed
winterset_2017_price <- city_price_data %>%
filter(RegionName == "Winterset") %>%
pull(X2017.01)
#returns a list of 2017 summary info
return(list("Highest Price" = highest_median_price_2017,
"Lowest Price" = lowest_median_price_2017,
"Average Price" = average_median_price_2017,
"New_York_Price" = new_york_2017_price,
"Winterset_Price" = winterset_2017_price))
}
get_summary_info(city_price_data)
# gets summary information about a given dataset
get_summary_info <- function(dataset) {
# gets the city with the highest median house price in 2017
highest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == max(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the city with the lowest median house price in 2017
lowest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == min(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the average median house price in 2017
average_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 != is.na(X2017.01)) %>%
summarize(mean = mean(X2017.01)) %>%
pull(mean)
# gets the median price of the largest city, New York in 2017
new_york_2017_price <- city_price_data %>%
filter(RegionName == "New York") %>%
pull(X2017.01)
# gets the median price of Winterset, which is tied for smallest city listed
winterset_2017_price <- city_price_data %>%
filter(RegionName == "Winterset") %>%
pull(X2017.01)
#returns a list of 2017 summary info
return(list("Highest Price: " = highest_median_price_2017,
"Lowest Price: " = lowest_median_price_2017,
"Average Price: " = average_median_price_2017,
"New_York_Price: " = new_york_2017_price,
"Winterset_Price: " = winterset_2017_price))
}
get_summary_info(city_price_data)
# gets summary information about a given dataset
get_summary_info <- function(dataset) {
# gets the city with the highest median house price in 2017
highest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == max(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the city with the lowest median house price in 2017
lowest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == min(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the average median house price in 2017
average_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 != is.na(X2017.01)) %>%
summarize(mean = mean(X2017.01)) %>%
pull(mean)
# gets the median price of the largest city, New York in 2017
new_york_2017_price <- city_price_data %>%
filter(RegionName == "New York") %>%
pull(X2017.01)
# gets the median price of Winterset, which is tied for smallest city listed
winterset_2017_price <- city_price_data %>%
filter(RegionName == "Winterset") %>%
pull(X2017.01)
#returns a list of 2017 summary info
return(list(c("Highest Price: " = highest_median_price_2017),
c("Lowest Price: " = lowest_median_price_2017),
"Average Price: " = average_median_price_2017,
"New_York_Price: " = new_york_2017_price,
"Winterset_Price: " = winterset_2017_price))
}
get_summary_info(city_price_data)
# gets summary information about a given dataset
get_summary_info <- function(dataset) {
# gets the city with the highest median house price in 2017
highest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == max(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the city with the lowest median house price in 2017
lowest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == min(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the average median house price in 2017
average_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 != is.na(X2017.01)) %>%
summarize(mean = mean(X2017.01)) %>%
pull(mean)
# gets the median price of the largest city, New York in 2017
new_york_2017_price <- city_price_data %>%
filter(RegionName == "New York") %>%
pull(X2017.01)
# gets the median price of Winterset, which is tied for smallest city listed
winterset_2017_price <- city_price_data %>%
filter(RegionName == "Winterset") %>%
pull(X2017.01)
#returns a list of 2017 summary info
return(list(c("Highest Price: " = highest_median_price_2017),
c("Lowest Price: " = lowest_median_price_2017),
c("Average Price: " = average_median_price_2017),
c("New_York_Price: " = new_york_2017_price),
c("Winterset_Price: " = winterset_2017_price)))
}
get_summary_info(city_price_data)
get_summary_info(city_price_data)[1]
# gets summary information about a given dataset
get_summary_info <- function(dataset) {
# gets the city with the highest median house price in 2017
highest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == max(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the city with the lowest median house price in 2017
lowest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == min(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the average median house price in 2017
average_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 != is.na(X2017.01)) %>%
summarize(mean = mean(X2017.01)) %>%
pull(mean)
# gets the median price of the largest city, New York in 2017
new_york_2017_price <- city_price_data %>%
filter(RegionName == "New York") %>%
pull(X2017.01)
# gets the median price of Winterset, which is tied for smallest city listed
winterset_2017_price <- city_price_data %>%
filter(RegionName == "Winterset") %>%
pull(X2017.01)
#returns a list of 2017 summary info
return(c(c("Highest Price: " = highest_median_price_2017),
c("Lowest Price: " = lowest_median_price_2017),
c("Average Price: " = average_median_price_2017),
c("New_York_Price: " = new_york_2017_price),
c("Winterset_Price: " = winterset_2017_price)))
}
get_summary_info(city_price_data)
get_summary_info(city_price_data)[1]
# gets summary information about a given dataset
get_summary_info <- function(dataset) {
# gets the city with the highest median house price in 2017
highest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == max(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the city with the lowest median house price in 2017
lowest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == min(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the average median house price in 2017
average_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 != is.na(X2017.01)) %>%
summarize(mean = mean(X2017.01)) %>%
pull(mean)
# gets the median price of the largest city, New York in 2017
new_york_2017_price <- city_price_data %>%
filter(RegionName == "New York") %>%
pull(X2017.01)
# gets the median price of Winterset, which is tied for smallest city listed
winterset_2017_price <- city_price_data %>%
filter(RegionName == "Winterset") %>%
pull(X2017.01)
#returns a list of 2017 summary info
return(c(c("Highest Price:" = highest_median_price_2017),
c("Lowest Price:" = lowest_median_price_2017),
c("Average Price:" = average_median_price_2017),
c("New_York_Price:" = new_york_2017_price),
c("Winterset_Price:" = winterset_2017_price)))
}
get_summary_info(city_price_data)
get_summary_info(city_price_data)[1]
# gets summary information about a given dataset
get_summary_info <- function(dataset) {
# gets the city with the highest median house price in 2017
highest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == max(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the city with the lowest median house price in 2017
lowest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == min(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the average median house price in 2017
average_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 != is.na(X2017.01)) %>%
summarize(mean = mean(X2017.01)) %>%
pull(mean)
# gets the median price of the largest city, New York in 2017
new_york_2017_price <- city_price_data %>%
filter(RegionName == "New York") %>%
pull(X2017.01)
# gets the median price of Winterset, which is tied for smallest city listed
winterset_2017_price <- city_price_data %>%
filter(RegionName == "Winterset") %>%
pull(X2017.01)
#returns a list of 2017 summary info
return(c(c("Highest Price:" = highest_median_price_2017),
paste(c("Lowest Price:" = lowest_median_price_2017)),
c("Average Price:" = average_median_price_2017),
c("New_York_Price:" = new_york_2017_price),
c("Winterset_Price:" = winterset_2017_price)))
}
get_summary_info(city_price_data)
get_summary_info(city_price_data)[1]
get_summary_info(city_price_data)[2]
# gets summary information about a given dataset
get_summary_info <- function(dataset) {
# gets the city with the highest median house price in 2017
highest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == max(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the city with the lowest median house price in 2017
lowest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == min(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the average median house price in 2017
average_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 != is.na(X2017.01)) %>%
summarize(mean = mean(X2017.01)) %>%
pull(mean)
# gets the median price of the largest city, New York in 2017
new_york_2017_price <- city_price_data %>%
filter(RegionName == "New York") %>%
pull(X2017.01)
# gets the median price of Winterset, which is tied for smallest city listed
winterset_2017_price <- city_price_data %>%
filter(RegionName == "Winterset") %>%
pull(X2017.01)
#returns a list of 2017 summary info
return(c(c("Highest Price:" = highest_median_price_2017),
c("Lowest Price:" = lowest_median_price_2017),
c("Average Price:" = average_median_price_2017),
c("New_York_Price:" = new_york_2017_price),
c("Winterset_Price:" = winterset_2017_price)))
}
get_summary_info(city_price_data)
get_summary_info(city_price_data)[4]
get_summary_info(city_price_data)[3]
get_summary_info(city_price_data)
get_summary_info(city_price_data)
# gets summary information about a given dataset
get_summary_info <- function(dataset) {
# gets the city with the highest median house price in 2017
highest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == max(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the city with the lowest median house price in 2017
lowest_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 == min(X2017.01, na.rm = TRUE)) %>%
pull(RegionName)
# gets the average median house price in 2017
average_median_price_2017 <- city_price_data %>%
select(RegionName, X2017.01) %>%
filter(X2017.01 != is.na(X2017.01)) %>%
summarize(mean = mean(X2017.01)) %>%
pull(mean)
# gets the median price of the largest city, New York in 2017
new_york_2017_price <- city_price_data %>%
filter(RegionName == "New York") %>%
pull(X2017.01)
# gets the median price of Winterset, which is tied for smallest city listed
winterset_2017_price <- city_price_data %>%
filter(RegionName == "Winterset") %>%
pull(X2017.01)
#returns a list of 2017 summary info
return(c(c("Highest Price:" = highest_median_price_2017),
c("Lowest Price:" = lowest_median_price_2017),
c("Average Price:" = average_median_price_2017),
c("New_York_Price:" = new_york_2017_price),
c("Winterset_Price:" = winterset_2017_price)))
}
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
select(matches(columns)) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
Region.Name = RegionName,
List.Price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
# The particular group calculation was done because each of the data sets
# we are using is organized by a different type of region, city, state, county,
# neighborhood, and Zip code. The data can be applied to show the average list
# price by region over the course of 7 years. It displays the highest 10 prices.
city_data <- read.csv(
"../project-data/median-listing-price/City_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
highest_cities_table1 <- aggregate_table(city_data)
columns <- c("201|RegionName")
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
Region.Name = RegionName,
List.Price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
highest_cities_table1 <- aggregate_table(city_data)
View(highest_cities_table1)
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
rename(
Region.Name = RegionName,
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
highest_cities_table1 <- aggregate_table(city_data)
View(highest_cities_table1)
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
rename(
Region.Name = RegionName,
List.Price = list_price
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
aggregate_table <- function(data) {
data %>%
#Getting all the year columns and the Region Name column
select(matches("201|RegionName")) %>%
#Using Gather to Make Month Column have old column values as rows
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
rename(
Region.Name = RegionName,
List.Price = list_price
) %>%
summarise(
List.Price = mean(List.Price, na.rm = TRUE)
) %>%
arrange(desc(List.Price)) %>%
top_n(15)
}
highest_cities_table1 <- aggregate_table(city_data)
install.packages("kableExtra")
?kableExtra
