fav_1 <- 7
(201)
# Divide each number by the square root of 201 and save the new value in the
# original variable
new_1 <- fav_1 / sqrt(201)
fav_1 <- new_1
new_2 <- fav_2 / sqrt(201)
fav_2 <- new_2
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1)
round_2 <- round(fav_2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(hometown)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(max_puppies)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(my_height)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(fav_1, fav_2)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(my_name, name_length, new_1, new_2, now_doing, puppies)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(puppy_price, raw_sum, round_1, round_2, round_sum, sum_round, too_expensive)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
rm(total_cost)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
?substr
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(1, 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(start = 1, stop = 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(1, start = 1, stop = 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(x, start = 1, stop = 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(x = 1, start = 1, stop = 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(lyric, 1, 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
numcharacters <- nchar(lyric)
fruits <- substr(lyric, 15, numcharacters)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(fruits, "a", "ee")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro + fruit_e
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro + fruits_e
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
is_twice_as_long <- function(string1, string2) {
string1_length <- nchar(string1)
string2_length <- nchar(string2)
small_string <- min(string1_length, string2_length)
long_string <- max(string1_length, string2_length)
if(long_string - small_string == small_string) {
twice_length <- TRUE
return(twice_length)
} else {
twice_length <- FALSE
return(twice_length)
}
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("java", "no")
is_twice_as_long("no", "java")
is_twice_as_long("R", "java")
rm(fruits, fruits_e, fruits_o)
rm(intro, lyric, lyric_e, numcharacters)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Kaarina", "Kristiina", "Irene")
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Kaarina", "Kristiina", "Irene")
print(paste(names))
print(paste(names))
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n + 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(10, 1))
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- c(seq(-5, 10, 0.1))
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
rm(m)
rm(n, cos_wave, names, sin_wave, wave, x_range)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(seq(21, 30))
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten, next_ten
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(seq(1, 100, 2))
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(seq(0, 100, 2))
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(seq(2, 100, 2))
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
print(paste(even))
even %% 2
print(paste(even %% 2)
all(even %% 2 = 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 = 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- c(phone_numbers[1:3])
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- c(phone_numbers[<5])
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers < 5
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
num_is_small <- phone_numbers < 5
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
num_is_small <- phone_numbers <= 5
small <- phone_numbers[num_is_small]
small <- phone_numbers[phone_numbers <= 5]
rm(num_is_small)
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 == 1] <-0
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 == 1] <- 0
str_count("eeyore", "e")
library(stringr)
str_count("eeyore", "e")
count_occurrences <- function(vector_letters, letter) {
num_occurrences <- str_count(vector_letters, letter)
return(num_occurrences)
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
num_e <- count_occurrences(sentence, "e")
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
num_e <- count_occurrences(sentence_list, "e")
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "coding in r is fun"
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
sentence_list <- strsplit(sentence, split = "")
count_occurrences <- function(vector_letters, letter) {
num_occurrences <- str_count(vector_letters, letter)
return(num_occurrences)
}
num_e <- count_occurrences(sentence_list, "e")
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
num_e <- count_occurrences(sentence_list("eeyore", "e")
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
num_e <- count_occurrences("eeyore", "e")
num_e <- count_occurrences("eeyore", "e")
num_e <- count_occurrences(sentence, "e")
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "coding in r is great"
num_e <- count_occurrences(sentence, "e")
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(sentence, count_occurrences())
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(sentence, count_occurrences(), unique_letters)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(sentence, count_occurrences(), "e")
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(sentence, count_occurrences("e"))
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(sentence, count_occurrences("e"))
# Assignment 2: Foundational Skills
#
# Before you get started:
# - Set your working directory to "source file location" using the Session menu
# - Run the following line of code to delete all variables in your workspace
#     (This will make it easier to test your script)
rm(list = ls())
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
top_three <- movies[1:3]
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Forrest Gump", "Tangled", "Men In Black", "Knives Out", "Bicentennial Man", "Star Wars")
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase " is a great movie!" to the end of each element in `movies`
excited <- c(movies, " is a great movie")
paste(excited)
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase " is a great movie!" to the end of each element in `movies`
excited <- paste(movies, " is a great movie")
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase " is a great movie!" to the end of each element in `movies`
excited <- paste(movies, " is a great movie!")
print(excited)
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase " is a great movie!" to the end of each element in `movies`
excited <- paste(movies, "is a great movie!")
print(excited)
# Create a vector `without_four` that omits the fourth element from `movies`
# You should do this by using a _negative index_
without_four <- movies[-4]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- c(4:400/4)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- c((4:400)%%4)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- c((4:400)%%4 == 0)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
numbers <- c(4:400)
multiples_of_four <- numbers[(numbers%%4) == 0]
print(multiples_of_four)
multiples_of_four <- numbers[(c(4:400)%%4) == 0]
print(multiples_of_four)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- numbers[(c(4:400)%%4) == 0]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- (c(4:400)%%4) == 0
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- c((c(4:400)%%4) == 0)
rm(numbers)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- numbers[(c(4:400)%%4) == 0]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
numbers <- c(4:400)
multiples_of_four <- numbers[(numbers%%4) == 0]
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Hints:
# - See chapter 7.4 in the book for vector filtering
# - Google search "modulo operator in R"
multiples_of_eight <- multiples_of_four[(multiples_of_four%%8) == 0]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
range <- c(4:400)
multiples_of_four <- numbers[(range%%4) == 0]
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Hints:
# - See chapter 7.4 in the book for vector filtering
# - Google search "modulo operator in R"
multiples_of_eight <- multiples_of_four[(multiples_of_four%%8) == 0]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of the vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of the vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of the vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in the `numbers` vector
# that are lower than `numbers_mean`
# Hint: Use vector filtering)
lower_numbers <- numbers[(numbers < 849.5)]
print(lower_numbers)
# Create a vector `higher_numbers` that the values in the `numbers` vector
# that are higher than `numbers_mean`
# Hint: Again, use vector filtering
higher_numbers <- numbers[(numbers > 849.5)]
install.packages("lintr")
clear
cls
install.packages("lintr")
t
install.packages("lintr")
install.packages("xml2")
install.packages("xml2")
install.packages("lintr")
install.packages("libxml-2.0")
install.packages("lintr")
install.packages("openssl")
install.packages("openssl")
install.packages("lintr")
setwd("~/Documents/INFO201/INFO-201-Final-Project/scripts")
# read in dataset
city_data <- read.csv("../project-data/median-listing-price/City_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
city_data <- mutate(city_data, "City, State" =  paste(RegionName, State))
library("dplyr")
library("leaflet")
city_data <- mutate(city_data, "City, State" =  paste(RegionName, State))
location_data <- read.csv("../project-data/uscities.csv",
stringsAsFactors = FALSE)
location_data <- mutate(location_data, "City, State" = paste(city, state_id))
city_location <- dplyr::left_join(city_data, location_data, by = "City, State")
point_labels <- lapply(seq(nrow(city_location)), function(i) {
paste0("<p>", city_location[i, "name"], "<p></p>",
city_location[i, "city"], "</p><p>")
})
city_map <- leaflet(data = city_location) %>%
addTiles() %>%
setView(lng = -96, lat = 40, zoom = 4) %>%
addCircles(
lat = ~lat,
lng = ~lng,
radius = ~radius,
stroke = FALSE,
label = lapply(point_labels, htmltools::HTML)
)
city_location <- mutate(city_location, radius = 0.025 * X2017.09)
city_map <- leaflet(data = city_location) %>%
addTiles() %>%
setView(lng = -96, lat = 40, zoom = 4) %>%
addCircles(
lat = ~lat,
lng = ~lng,
radius = ~radius,
stroke = FALSE,
label = lapply(point_labels, htmltools::HTML)
)
getwd()
setwd("~/Documents/INFO201/INFO-201-Final-Project")
getwd()
?caption
??caption
?kable
shinyApp(ui = ui, server = server)
library(shiny)
source("app_ui.R")
setwd("C:/Users/rchap/Info201/INFO-201-Final-Project/scripts")
library(shiny)
source("app_ui.R")
source("app_server.R")
shinyApp(ui = ui, server = server)
library(shiny)
server <- function(input, ouput) {
}
library(shiny)
library(shiny)
ui <- fluidPage(
h1("hi")
)
library(shiny)
server <- function(input, ouput) {
}
shinyApp(ui = ui, server = server)
library("shiny")
source("app_ui.R")
source("app_server.R")
setwd("C:/Users/rchap/Info201/INFO-201-Final-Project/scripts")
setwd("C:/Users/rchap/Info201/INFO-201-Final-Project/scripts")
setwd("C:/Users/rchap/Info201/INFO-201-Final-Project/scripts")
shinyApp(ui = ui, server = server)
library("shiny")
source("app_ui.R")
shinyApp(ui = ui, server = server)
shinyApp(ui = ui)
shinyApp(ui = ui, server = server)
server <- function(input, ouput) {
}
shinyApp(ui = ui, server = server)
server <- function(input, ouput) {
}
server <- function(input, ouput) {
}
ui <- fluidPage(
h1("hi"),
p(
"This is a paragraph"
)
)
shinyApp(ui = ui, server = server)
runApp()
