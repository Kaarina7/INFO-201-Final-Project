days_listed <- read.csv("..\project-data\days-on-zillow",
stringsAsFactors = FALSE)
library(dplyr)
# load needed packages
library(ggplot2)
library(dplyr)
# load data frame
days_listed <- read.csv("..\project-data\days-on-zillow",
stringsAsFactors = FALSE)
# load data frame
days_listed <- read.csv("../project-data/days-on-zillow",
stringsAsFactors = FALSE)
days_listed_state <-
read.csv("../project-data/days-on-zillow/daysonzillow_public_state",
stringsAsFactors = FALSE)
days_listed_county <-
read.csv("../project-data/days-on-zillow/daysonzillow_public_county",
stringsAsFactors = FALSE)
# load data frames
days_listed_state <-
read.csv("../project-data/days-on-zillow/daysonzillow_public_state.csv",
stringsAsFactors = FALSE)
days_listed_state <-
read.csv("../project-data/days-on-zillow/daysonzillow_public_state.csv",
stringsAsFactors = FALSE)
# load data frames
days_listed_state <-
read.csv("../project-data/days-on-zillow/daysonzillow_public_state",
stringsAsFactors = FALSE)
setwd("~/INFO201/INFO-201-Final-Project/scripts")
days_listed_state <-
read.csv("../project-data/days-on-zillow/daysonzillow_public_state",
stringsAsFactors = FALSE)
days_listed_county <-
read.csv("../project-data/days-on-zillow/daysonzillow_public_county.csv",
stringsAsFactors = FALSE)
# load data frames
days_listed_state <-
read.csv("../project-data/days-on-zillow/daysonzillow_public_state.csv",
stringsAsFactors = FALSE)
View(days_listed_county)
View(days_listed_county)
View(days_listed_state)
View(days_listed_state)
# load data frames
days_listed_state <-
read.csv("../project-data/days-on-zillow/daysonzillow_public_state.csv",
stringsAsFactors = FALSE, header = TRUE)
# load data frames
days_listed_state <-
read.csv("../project-data/days-on-zillow/daysonzillow_public_state.csv",
stringsAsFactors = FALSE, header = TRUE)
View(days_listed_state)
View(days_listed_state)
names(days_listed_state) <- as.matrix(days_listed_state[1, ])
days_listed_state <- days_listed_state[-1, ]
days_listed_state[["CBSA Title"]] = NULL
days_listed_state <- days_listed_state[-2:-1, ]
days_listed_state <-
read.csv("../project-data/days-on-zillow/daysonzillow_public_state.csv",
stringsAsFactors = FALSE)
names(days_listed_state) <- as.matrix(days_listed_state[1, ])
days_listed_state <- days_listed_state[-2:-1, ]
days_listed_state[["CBSA Title"]] = NULL
days_listed_state <- subset(days_listed_state, select = -c(StateName, RegionType, SizeRank))
days_listed_county <- subset(days_listed_county, select = -c(StateName, RegionType, CBSA.type, SizeRank))
days_listed_county <- subset(days_listed_county, select = -c(StateName, RegionType, CBSA.Title, SizeRank))
United_States <- days_listed_county[1, ]
days_listed_county <- days_listed_county[-1, ]
makes_graph <- function(region_type, region_name) {
region_type <- tolower(region_type)
region_name <- tolower(region_name)
if (region_type == "state") {
df <- days_listed_state
} else { # region_type == county
df <- days_listed_county
}
relevant_data <- df[df$RegionName == region_name, ]
title <- relevant_data[["RegionName"]]
relevant_data <- relevant_data[-1, ]
ggplot(relevant_data) + geom_point()
}
days_listed_state$RegionName <- tolower(days_listed_state$RegionName)
days_listed_county$RegionName <- tolower(days_listed_county$RegionName)
makes_graph("state", "Washington")
# function to produce a line graph of days listed on zillow over time
# takes the take of region (county or state) and then a region name as inputs
makes_graph <- function(region_type = "state", region_name = "washington") {
region_type <- tolower(region_type)
region_name <- tolower(region_name)
if (region_type == "state") {
df <- days_listed_state
} else { # region_type == county
df <- days_listed_county
}
relevant_data <- df[df$RegionName == region_name, ]
title <- relevant_data[["RegionName"]]
relevant_data <- relevant_data[-1, ]
ggplot(relevant_data) + geom_point()
}
region_type <- tolower(region_type)
region_name <- tolower(region_name)
if (region_type == "state") {
df <- days_listed_state
} else { # region_type == county
df <- days_listed_county
}
relevant_data <- df[df$RegionName == region_name, ]
title <- relevant_data[["RegionName"]]
relevant_data <- relevant_data[-1, ]
ggplot(relevant_data) + geom_point()
# function to produce a line graph of days listed on zillow over time
# takes the take of region (county or state) and then a region name as inputs
makes_graph <- function(region_type, region_name) {
region_type <- tolower(region_type)
region_name <- tolower(region_name)
if (region_type == "state") {
df <- days_listed_state
} else { # region_type == county
df <- days_listed_county
}
relevant_data <- df[df$RegionName == region_name, ]
title <- relevant_data[["RegionName"]]
relevant_data <- relevant_data[-1, ]
ggplot(relevant_data) + geom_point()
}
makes_graph("state", "Washington")
# function to produce a line graph of days listed on zillow over time
# takes the take of region (county or state) and then a region name as inputs
makes_graph <- function(region_type, region_name) {
region_type <- tolower(region_type)
region_name <- tolower(region_name)
if (region_type == "state") {
df <- days_listed_state
} else { # region_type == county
df <- days_listed_county
}
relevant_data <- df[df$RegionName == region_name, ]
title <- relevant_data[["RegionName"]]
relevant_data <- relevant_data[-1, ]
print(title)
relevant_data
ggplot(relevant_data) + geom_point()
}
makes_graph("state", "Washington")
# function to produce a line graph of days listed on zillow over time
# takes the take of region (county or state) and then a region name as inputs
makes_graph <- function(region_type, region_name) {
region_type <- tolower(region_type)
region_name <- tolower(region_name)
if (region_type == "state") {
df <- days_listed_state
} else { # region_type == county
df <- days_listed_county
}
relevant_data <- df[df$RegionName == region_name, ]
title <- relevant_data[["RegionName"]]
relevant_data <- relevant_data[-1, ]
print(title)
cat(relevant_data)
ggplot(relevant_data) + geom_point()
}
makes_graph("state", "Washington")
# function to produce a line graph of days listed on zillow over time
# takes the take of region (county or state) and then a region name as inputs
makes_graph <- function(region_type, region_name) {
region_type <- tolower(region_type)
region_name <- tolower(region_name)
if (region_type == "state") {
df <- days_listed_state
} else { # region_type == county
df <- days_listed_county
}
relevant_data <- df[df$RegionName == region_name, ]
title <- relevant_data[["RegionName"]]
relevant_data <- relevant_data[-1, ]
print(title)
print(relevant_data)
ggplot(relevant_data) + geom_point()
}
makes_graph("state", "Washington")
# function to produce a line graph of days listed on zillow over time
# takes the take of region (county or state) and then a region name as inputs
makes_graph <- function(region_type, region_name) {
region_type <- tolower(region_type)
region_name <- tolower(region_name)
if (region_type == "state") {
df <- days_listed_state
} else { # region_type == county
df <- days_listed_county
}
relevant_data <- df[df$RegionName == region_name, ]
title <- relevant_data[["RegionName"]]
relevant_data$RegionName <- NULL
print(title)
print(relevant_data)
ggplot(relevant_data) + geom_point()
}
makes_graph("state", "Washington")
# function to produce a line graph of days listed on zillow over time
# takes the take of region (county or state) and then a region name as inputs
makes_graph <- function(region_type, region_name) {
region_type <- tolower(region_type)
region_name <- tolower(region_name)
if (region_type == "state") {
df <- days_listed_state
} else { # region_type == county
df <- days_listed_county
}
relevant_data <- df[df$RegionName == region_name, ]
title <- relevant_data[["RegionName"]]
relevant_data$RegionName <- NULL
print(title)
print(relevant_data)
ggplot(relevant_data) + geom_path()
}
makes_graph("state", "Washington")
# function to produce a line graph of days listed on zillow over time
# takes the take of region (county or state) and then a region name as inputs
makes_graph <- function(region_type, region_name) {
region_type <- tolower(region_type)
region_name <- tolower(region_name)
if (region_type == "state") {
df <- days_listed_state
} else { # region_type == county
df <- days_listed_county
}
relevant_data <- df[df$RegionName == region_name, ]
title <- relevant_data[["RegionName"]]
relevant_data$RegionName <- NULL
print(title)
print(relevant_data)
ggplot(relevant_data, aes(x = colnames(relevant_data), y = relevant_data[1, ])) +
geom_path()
}
makes_graph("state", "Washington")
days_listed_county <-
read.csv("../project-data/days-on-zillow/daysonzillow_public_county.csv",
stringsAsFactors = FALSE)
United_States <- days_listed_county[1, ]
days_listed_county <- days_listed_county[-1, ]
days_listed_county <- subset(days_listed_county, select = -c(RegionType, CBSA.Title, SizeRank))
days_listed_county$RegionName <- tolower(days_listed_county$RegionName)
# function to produce a line graph of days listed on zillow over time
# takes the take of region (county or state) and then a region name as inputs
makes_graph <- function(region_type, region_name, state_code) {
region_type <- tolower(region_type)
region_name <- tolower(region_name)
state_code <- toupper(state_code)
if (region_type == "state") {
df <- days_listed_state
relevant_data <- df[df$RegionName == region_name, ]
} else { # region_type == county
df <- days_listed_county
relevant_data <- df[df$RegionName == region_name & df$StateName == state_code, ]
}
title <- relevant_data[["RegionName"]]
relevant_data$RegionName <- NULL
print(title)
print(relevant_data)
ggplot(relevant_data, aes(x = colnames(relevant_data), y = relevant_data[1, ])) +
geom_path()
}
makes_graph("state", "Washington")
makes_graph("state", "Washington", "WA")
makes_graph("state", "Washington")
# function to produce a line graph of days listed on zillow over time
# takes the take of region (county or state) and then a region name as inputs
makes_graph <- function(region_type, region_name, state_code = NULL) {
region_type <- tolower(region_type)
region_name <- tolower(region_name)
if (region_type == "state") {
df <- days_listed_state
relevant_data <- df[df$RegionName == region_name, ]
} else { # region_type == county
df <- days_listed_county
state_code <- toupper(state_code)
relevant_data <- df[df$RegionName == region_name & df$StateName == state_code, ]
}
title <- relevant_data[["RegionName"]]
relevant_data$RegionName <- NULL
print(title)
print(relevant_data)
ggplot(relevant_data, aes(x = colnames(relevant_data), y = relevant_data[1, ])) +
geom_path()
}
makes_graph("state", "Washington")
# function to produce a line graph of days listed on zillow over time
# takes the take of region (county or state) and then a region name as inputs
makes_graph <- function(region_type, region_name, state_code = NULL) {
region_type <- tolower(region_type)
region_name <- tolower(region_name)
if (region_type == "state") {
df <- days_listed_state
relevant_data <- df[df$RegionName == region_name, ]
} else { # region_type == county
df <- days_listed_county
state_code <- toupper(state_code)
relevant_data <- df[df$RegionName == region_name & df$StateName == state_code, ]
}
relevant_data <- as.data.frame(t(as.matrix(relevant_data)))
print(relevant_data)
ggplot(relevant_data, aes(x = colnames(relevant_data), y = relevant_data[1, ])) +
geom_path()
}
makes_graph("state", "Washington")
setwd("~/INFO201/INFO-201-Final-Project/scripts")
setwd("~/INFO201/INFO-201-Final-Project")
setwd("~/INFO201/INFO-201-Final-Project")
getwd
getwd()
?source
library(leaflet)
# loads needed packages
library(dplyr)
library(lintr)
library(reshape2)
library(tidyr)
library(tidyverse)
library(stringr)
aggregate_table <- function(data){
columns_needed <- data[, grep("201|RegionName", names(data))]
data %>%
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
o <- aggregate_table(data)
data <- read.csv("../Info201/INFO-201-Final-Project/project-data/median-listing-price/State_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
setwd("C:/Users/rchap/Info201/INFO-201-Final-Project/scripts")
aggregate_table <- function(data){
columns_needed <- data[, grep("201|RegionName", names(data))]
data %>%
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
o <- aggregate_table(data)
aggregate_table <- function(data){
columns_needed <- data(, grep("201|RegionName", names(data)))
data %>%
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
o <- aggregate_table(data)
data <- read.csv("../Info201/INFO-201-Final-Project/project-data/median-listing-price/State_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
data <- read.csv("C:/Users/rchap/Info201/INFO-201-Final-Project/project-data/median-listing-price/State_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
a <- data[, grep("201|RegionName", names(data))]
aggregate_table <- function(data){
columns_needed <- data[, grep("201|RegionName", names(data))]
data %>%
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
o <- aggregate_table(data)
View(o)
knitr::opts_chunk$set(echo = TRUE)
aggregate_table(data)
a <- data[, grep("201|RegionName", names(data))]
data[, grep("201|RegionName", names(data))]
source("scripts/aggregatetable.R")
data <- read.csv("C:/Users/rchap/Info201/INFO-201-Final-Project/project-data/median-listing-price/State_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
aggregate_table(data)
source("scripts/aggregatetable.R")
data <- read.csv("C:/Users/rchap/Info201/INFO-201-Final-Project/project-data/median-listing-price/State_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
aggregate_table(data)
library(dplyr)
get_summary_info <- function(dataset) {
summary_list <- list()
summary_list$col_num <- length(unique(colnames(dataset)))
summary_list$highest_price <-
return(summary_list)
}
data <- read.csv("C:/Users/rchap/Info201/INFO-201-Final-Project/project-data/median-listing-price/State_MedianListingPrice_AllHomes.csv")
get_summary_info(data)
View(data)
setwd("C:/Users/rchap/Info201/INFO-201-Final-Project/scripts")
o <- aggregate_table(data)
data <- read.csv("C:/Users/rchap/Info201/INFO-201-Final-Project/project-data/median-listing-price/State_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
library(lintr)
lintr("aggregate_Table.R")
lint("aggregate_Table.R")
lint("aggregate_Table.R")
lint("aggregate_Table.R")
lint("aggregate_Table.R")
lint("aggregate_Table.R")
lint("aggregate_Table.R")
aggregate_table <- function(data) {
#Getting all the year columns and the Region Name column
#columns_needed <- data[, grep("201|RegionName", names(data))]
data %>%
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
o <- aggregate_table(data)
data <- read.csv("C:/Users/rchap/Info201/INFO-201-Final-Project/project-data/median-listing-price/State_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
<<<<<<< HEAD
# selects year columns and summarizes average median prices each year
city_summary <- city_data %>%
select(X2010.01, X2011.01, X2012.01, X2013.01, X2014.01, X2015.01, X2016.01,
X2017.01) %>%
filter_at(vars(X2010.01, X2011.01, X2012.01, X2013.01, X2014.01, X2015.01,
X2016.01, X2017.01), all_vars(!is.na(.))) %>%
summarize_all(mean) %>%
mutate(across(where(is.numeric), round, 0))
# makes summary data easier for ggplot to read
city_year_averages <- t(city_summary)
city_year_averages <- cbind(year = rownames(city_year_averages),
city_year_averages)
rownames(city_year_averages) <- NULL
summary_data <- data.frame(city_year_averages)
summary_data[["V2"]] <- as.numeric(summary_df$V2)
# creates the bar graph using summary data
labels <- c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017")
options(scipen = 10000)
price_bar_graph <- ggplot(data = summary_data, aes(x = labels, y = V2)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
xlab("Year") +
ylab("Average Median House Price (USD)") +
coord_cartesian(ylim = c(0, 300000))
summary_data <- data.frame(city_year_averages)
# loads the data set
city_data <- read.csv(
"../project-data/median-listing-price/City_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
# loads the data set
setwd("..")
getwd()
# loads the data set
setwd("./scripts/")
# loads the data set
setwd("./scripts")
getwd()
setwd("~/INFO201/INFO-201-Final-Project/scripts")
install.packages("rstudioapi")
install.packages("rstudioapi")
library(rstudioapi)
# loads the data set
setwd(dirname(getActiveDocumentContext()$path))
# loads the data set
setwd(dirname(getActiveDocumentContext()$path))
library(rstudioapi)
library(rstudio.api)
library(rstudioapi)
library(rstudioapi)
# loads the data set
setwd(dirname(getActiveDocumentContext()$path))
=======
o <- aggregate_table(data)
columns_needed <- data[, grep("201|RegionName", names(data))]
View(columns_needed)
data_11 <- read.csv("C:/Users/rchap/Info201/INFO-201-Final-Project/project-data/median-listing-price/State_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
library(dplyr)
library(lintr)
library(reshape2)
library(tidyr)
library(tidyverse)
library(stringr)
library(lintr)
aggregate_table <- function(data) {
#Getting all the year columns and the Region Name column
columns_needed <- data[, grep("201|RegionName", names(data))]
data %>%
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
data_11 <- read.csv("C:/Users/rchap/Info201/INFO-201-Final-Project/project-data/median-listing-price/State_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
o <- aggregate_table(data)
aggregate_table <- function(data) {
#Getting all the year columns and the Region Name column
columns_needed <- data[, grep("201|RegionName", names(data))]
columns_needed %>%
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
o <- aggregate_table(data)
columns_needed <- data_11[, grep("201|RegionName", names(data_11))]
a <- grep("201|RegionName", names(data))
a <- data_11[grep("201|RegionName", names(data))]
a <- data_11[, grep("201|RegionName", names(data))]
a <- data_11[, grep("201|RegionName", names(data))]
X <- read.csv("C:/Users/rchap/Info201/INFO-201-Final-Project/project-data/median-listing-price/State_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
columns_needed <- data_11[, grep("201|RegionName", names(data_11))]
lint("aggregate_Table.R")
a <- X[, grep("201|RegionName", names(X))]
a <- X[, grep("201|RegionName", names(X))]
aggregate_table <- function(data) {
#Getting all the year columns and the Region Name column
columns_needed <- data[, grep("201|RegionName", names(data))]
columns_needed %>%
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
o <- aggregate_table(data)
a <- X %>%
select(contains("201"))
View(a)
a <- X %>%
select(contains("201|RegionName"))
a <- X %>%
select(contains("201|RegionName"))
View(data_11)
a <- X %>%
select(matches("201|RegionName"))
View(a)
aggregate_table <- function(data) {
#Getting all the year columns and the Region Name column
data %>%
select(matches("201|RegionName")) %>%
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
o <- aggregate_table(data)
o <- aggregate_table(data)
library(dplyr)
library(lintr)
library(reshape2)
library(tidyr)
library(tidyverse)
library(stringr)
library(lintr)
# The particular group calculation was done because each of the data sets
# we are using is organized by a different type of region, city, state, county,
# neighborhood, and Zip code. The data can be applied to show the average list
# price by region over the course of 7 years. It displays the highest 10 prices.
aggregate_table <- function(data) {
#Getting all the year columns and the Region Name column
data %>%
select(matches("201|RegionName")) %>%
gather(key = "month", value = "list_price", -RegionName) %>%
group_by(RegionName) %>%
filter(
!is.na(list_price)
) %>%
mutate(
list_price = as.numeric(list_price)
) %>%
summarise(
list_price = mean(list_price, na.rm = TRUE)
) %>%
arrange(desc(list_price)) %>%
top_n(15)
}
o <- aggregate_table(X)
o <- aggregate_table(X)
X <- read.csv("C:/Users/rchap/Info201/INFO-201-Final-Project/project-data/median-listing-price/City_MedianListingPrice_AllHomes.csv",
stringsAsFactors = FALSE)
View(o)
View(X)
>>>>>>> 0163f345ba4495690a6c2ddb88ae5afad684aea3
